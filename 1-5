s1 -> pales , s2 -> pale

public static boolean needsMaxOneEdit(String s1, String s2){
  if(s1.length()-s2.length() == 1) {
    if(s1.length() > s2.length())
    {
      return checkMaxOneInsert(s1, s2);
    }
    else if(s1.length() < s2.length()) {
      return checkMaxOneInsert(s2, s1);
    }
  }
  else if (s1.length()==s2.length()){
    if(s1==s2)
	    return true;
    else
	    return checkMaxOneReplace(s1, s2);
  }
  return false;
}

public static boolean checkMaxOneInsert(String large, String small){
  int j = 0;
  int insert = 0;
  for(int i=0; i<large.length(); i++)
  {
    if(j!= small.length()) {
      if(large.charAt(i) != small.charAt(j))
      {
        insert++;
        if(insert>1)
          return false;
      }
      else if(large.charAt(i) == small.charAt(j))
        j++;
    }
    else
    {
    	if(j==small.length() && insert==0)
    	  return true;
    	else 
    	  return false;
    }
  }
  return true;
}

public static boolean checkMaxOneReplace(String s1, String s2){
  int j = 0;
  int replace = 0;
  for(int i=0; i<s1.length(); i++)
  {
    if(s1.charAt(i) != s2.charAt(i))
    {
      replace++;
      if(replace>1)
        return false;
    }
  }
  return true;
}
public static void main (String[] args) throws java.lang.Exception
{
  System.out.println(needsMaxOneEdit("pales","pale"));
}
