O(n)
s1 -> abc
s2 -> abe
hashtable -> 
a, 0
b, 0
c, 1

public bool arePermutation(String s1, String s2)
{
  if(s1.length() == s2.length())
  {
    // Creating hashtable with all the characters of s1
    HashTable<String,Integer> hashtable = new HashTable<String,Integer>();
    for(int i=0; i<s1.length(); i++) {
      Char currentChar = s1.charAt(i);
      if(hashtable.contains(currentChar)) {
      hashtable.put(currentChar, hashtable.get(currentChar)+1);
      } else{
      hashtable.put(currentChar, 1);
      }
    }
  
    //Checking characters of s2 against hashtable
    for(int i=0; i<s2.length(); i++) {
      Char currentChar = s2.charAt(i);
      if(hashtable.contains(currentChar)) {
        Integer currentCharValue = hashtable.get(currentChar);
        if(currentCharValue>0)
          hashtable.put(currentChar, hashtable.get(currentChar)-1);
        else 
          return false;
      } else{
        return false;
      }
    }
    return true;
  }
  else
    return false;
}
