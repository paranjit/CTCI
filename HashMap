public class HashMap<K,V> {

private ArrayList<HashNode<K,V>> bucket;
int numBucket = 10;
int size;

public HashMap() {
  for (int i=0; i<numBucket; i++)
  {
    bucket[i] = null;
  }
}

public int getSize{
  return size;
}

public V get(K key)
{
  int index = getIndex(key);
  HashNode head = bucket.get(index);
  while(head!=null)
  {
    if(head.key.equals(key))
    {
      return head.value;
    }
    head = head.next;
  }
  return -1;
}

private int getIndex(K key)
{
  int hash = key.hashCode();
  return hash%numBucket;
}
public void add(K key, V value)
{
  int index = getIndex(key);
  HashNode head = bucket.get(index);
  HashNode<K,V> addNode = new HashNode<K,V>();
  addNode.key = key;
  addNode.value = value;
  
  //Head is null
  if(head == null)
  {
    bucket.set(index, addNode);
    size++;
  }
  else {
    //Key is in chain
    while(head != null)
    {
      if(head.key.equals(key))
      {
        head.value = value;
        break;
      }
      head = head.next;
    }
    
    // Key is not present
    if(head == null)
    {
      head = bucket.get(index);
      addNode.next = head;
      bucket.set(index, addNode);
      size++;
    }
  }
  //can optimize the hashtable by checking load factor = size/numBucket > 0.7
}
}
